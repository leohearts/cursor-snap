name: Auto Update Cursor Snap

on:
  schedule:
    - cron: '0 * * * *'  # Run every hour
  workflow_dispatch:      # Allow manual trigger

jobs:
  check-and-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux-x64, linux-arm64]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Snapcraft
        run: |
          sudo snap install snapcraft --classic
          sudo snap install lxd
          sudo lxd init --auto

      - name: Get latest Cursor version and download URL
        id: cursor-version
        run: |
          DOWNLOAD_URL="https://www.cursor.com/api/download?platform=${{ matrix.platform }}&releaseTrack=latest"
          echo "Checking download URL: $DOWNLOAD_URL"
          
          # Get the redirect URL with verbose output for debugging
          CURL_OUTPUT=$(curl -sI -v "$DOWNLOAD_URL")
          echo "Curl output:"
          echo "$CURL_OUTPUT"
          
          # Extract the location header
          REDIRECT_URL=$(echo "$CURL_OUTPUT" | grep -i "^location:" | awk '{print $2}' | tr -d '\r')
          echo "Redirect URL: $REDIRECT_URL"
          
          # Check if REDIRECT_URL is empty
          if [ -z "$REDIRECT_URL" ]; then
            echo "Error: Could not extract redirect URL. Using fallback URL."
            # Use a fallback URL based on the platform
            if [ "${{ matrix.platform }}" == "linux-x64" ]; then
              REDIRECT_URL="https://download.cursor.sh/linux/Cursor-0.27.0-linux-x86_64.tar.gz"
              VERSION="0.27.0"
            else
              REDIRECT_URL="https://download.cursor.sh/linux/Cursor-0.27.0-linux-aarch64.tar.gz"
              VERSION="0.27.0"
            fi
          else
            # Try to extract version from URL with different patterns
            VERSION=$(echo "$REDIRECT_URL" | grep -oP 'Cursor-\K[^-]+(?=-)' || echo "")
            
            # If the first pattern fails, try an alternative pattern
            if [ -z "$VERSION" ]; then
              VERSION=$(echo "$REDIRECT_URL" | grep -oP 'Cursor-\K[\d\.]+' || echo "0.27.0")
            fi
          fi
          
          echo "Extracted version: $VERSION"
          echo "CURSOR_VERSION=$VERSION" >> $GITHUB_ENV
          echo "DOWNLOAD_URL=$REDIRECT_URL" >> $GITHUB_ENV
          echo "Version: $VERSION"
          echo "Download URL: $REDIRECT_URL"

      - name: Update snapcraft.yaml
        run: |
          # Update version
          sed -i "s/version: '.*'/version: '${{ env.CURSOR_VERSION }}'/g" snap/snapcraft.yaml
          # Update source URL
          sed -i "s|source: .*|source: ${{ env.DOWNLOAD_URL }}|g" snap/snapcraft.yaml
          
          # Show the updated snapcraft.yaml for debugging
          echo "Updated snapcraft.yaml:"
          cat snap/snapcraft.yaml

      - name: Build Snap
        run: |
          sudo snapcraft --use-lxd

      - name: Upload Snap Artifact
        uses: actions/upload-artifact@v4
        with:
          name: cursor-ide-snap
          path: cursor-ide*.snap
          retention-days: 1

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.CURSOR_VERSION }}-${{ matrix.platform }}
          name: Cursor IDE Snap ${{ env.CURSOR_VERSION }} (${{ matrix.platform }})
          files: cursor-ide*.snap
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update README version
        if: matrix.platform == 'linux-x64'
        run: |
          sed -i "s/Latest version: .*/Latest version: ${{ env.CURSOR_VERSION }}/g" README.md
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git commit -m "Update version to ${{ env.CURSOR_VERSION }}" || echo "No changes to commit"
          git push 