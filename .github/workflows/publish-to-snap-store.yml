name: Publish to Snap Store

on:
  workflow_run:
    workflows: ["Auto Update Cursor Snap"]
    types:
      - completed
  workflow_dispatch:  # Allow manual trigger

jobs:
  publish-to-snap-store:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download x64 artifacts
        uses: actions/download-artifact@v4
        with:
          name: cursor-ide-snap-linux-x64
          path: .
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
        continue-on-error: true

      - name: Download arm64 artifacts
        uses: actions/download-artifact@v4
        with:
          name: cursor-ide-snap-linux-arm64
          path: .
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
        continue-on-error: true

      - name: Check for snap files
        id: check_snap
        run: |
          if ls cursor-ide*.snap 1> /dev/null 2>&1; then
            echo "SNAP_FILES_EXIST=true" >> $GITHUB_ENV
            echo "Snap files found:"
            ls -la cursor-ide*.snap
          else
            echo "SNAP_FILES_EXIST=false" >> $GITHUB_ENV
            echo "No snap files found in artifacts. If running manually, you may need to build the snap first."
            
            # If running manually, try to download from the latest release
            if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
              echo "Attempting to download from latest GitHub release..."
              
              # Get latest release info
              LATEST_RELEASE=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest)
              
              # Download assets if available
              if echo "$LATEST_RELEASE" | grep -q "assets"; then
                # Extract download URLs for snap files
                ASSET_URLS=$(echo "$LATEST_RELEASE" | grep -o '"browser_download_url": "[^"]*\.snap"' | sed 's/"browser_download_url": "//;s/"//')
                
                if [ ! -z "$ASSET_URLS" ]; then
                  echo "Found snap files in latest release, downloading..."
                  for URL in $ASSET_URLS; do
                    echo "Downloading $URL"
                    curl -L -O "$URL"
                  done
                  
                  if ls cursor-ide*.snap 1> /dev/null 2>&1; then
                    echo "SNAP_FILES_EXIST=true" >> $GITHUB_ENV
                    echo "Downloaded snap files from latest release:"
                    ls -la cursor-ide*.snap
                  fi
                fi
              fi
            fi
          fi

      - name: Install Snapcraft
        if: env.SNAP_FILES_EXIST == 'true'
        run: sudo snap install snapcraft --classic

      - name: Login to Snap Store
        if: env.SNAP_FILES_EXIST == 'true'
        id: snapcraft_login
        run: |
          # Write credentials to a file without echoing to logs
          # Using printf instead of echo to avoid potential issues with special characters
          printf "%s" "${{ secrets.SNAPCRAFT_LOGIN_FILE }}" | base64 -d > snapcraft.login
          # Export credentials as an output for later steps
          echo "SNAPCRAFT_STORE_CREDENTIALS=$(cat snapcraft.login)" >> $GITHUB_ENV
          # Securely remove the credentials file
          rm snapcraft.login
          # Verify credentials are set (without printing them)
          if [ -n "$SNAPCRAFT_STORE_CREDENTIALS" ]; then
            echo "Snapcraft credentials loaded successfully"
          else
            echo "Failed to load Snapcraft credentials"
            exit 1
          fi

      - name: Publish to Snap Store
        if: env.SNAP_FILES_EXIST == 'true'
        run: |
          for snap_file in cursor-ide*.snap; do
            if [ -f "$snap_file" ]; then
              echo "Publishing $snap_file to Snap Store..."
              snapcraft upload --release=stable "$snap_file"
            fi
          done 